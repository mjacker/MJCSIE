# This Repository aim to cover topics related to Computer Sience.
Due to Major Computer Science has to many topics, usually for me if difficult to track and recall so I am making this repository as a way keep practicing many topics that I could someday.

- Mathematics: A strong foundation in mathematics, including discrete mathematics, calculus, and linear algebra, is often required.

- Programming: Learning programming languages and software development techniques is fundamental. Common languages may include Python, Java, C++, and others.

- Data Structures: Understanding the fundamental data structures like arrays, linked lists, trees, and graphs, and how to implement and use them.

- Algorithms: Studying algorithms for sorting, searching, and optimizing various computational tasks. This often includes algorithm analysis for time and space complexity.

- Computer Organization and Architecture: Exploring the organization and architecture of computer systems, including CPU design, memory, and I/O systems.

- Operating Systems: Understanding the principles and components of operating systems, including processes, threads, memory management, and file systems.

- Networking: Covering computer networks, protocols, routing, and network security.

- Cybersecurity: Principles of computer and network security, cryptography, and ethical hacking.

- Web Development: Front-end and back-end web development, including HTML, CSS, JavaScript, web frameworks, and web security.

- Databases: Learning about database design, SQL, NoSQL databases, and database management systems.

- Software Engineering: Principles and practices of software development, including software design, testing, debugging, and project management.

- Data Science: Techniques for data analysis, visualization, and interpretation, often involving tools like Python and R.

- Artificial Intelligence and Machine Learning: Basic concepts in AI and machine learning, including algorithms, neural networks, and applications.

- Computer Graphics: Basics of computer graphics, including 2D and 3D rendering, and graphical user interface (GUI) development.

- Theory of Computation: Topics such as automata theory, formal languages, and computability theory.

- Embedded systems: An embedded system is a computer system that is designed to perform a dedicated function within a larger mechanical or electronic system. 

- Human-Computer Interaction: Studying how humans interact with computers and designing user-friendly interfaces.

- Software Development Lifecycle: Understanding the various phases of software development, from requirements gathering to maintenance.

- Ethics and Professionalism: Examining ethical issues related to technology and the responsibilities of computer professionals.

- Electives: Many programs allow students to choose electives in specialized areas of interest, such as game development, mobile app development, or robotics.

- Capstone Project: Culminating the degree with a substantial project that demonstrates your skills and knowledge in a practical application.

> AI Generated.

---
# Projects I worked on:
- Raspberry
    - [Traffic lights](./Embedded%20Systems/readme.md)
